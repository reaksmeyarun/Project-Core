package com.kh.sbilyhour.user_service.infrastructure.mapper;

import com.kh.sbilyhour.user_service.adapters.dto.register_user.RegisteredUserWebDTO;
import com.kh.sbilyhour.user_service.application.dto.UserApplicationDTO;
import com.kh.sbilyhour.user_service.application.dto.register_user.RegistrationUserRequest;
import com.kh.sbilyhour.user_service.domain.entities.User;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;

/**
 * Mapper interface for converting between user-related DTOs and entities.
 *
 * <p>This interface is responsible for transforming data between various user-related
 * request and response objects, such as {@link RegistrationUserRequest},
 * {@link UserApplicationDTO}, {@link RegisteredUserWebDTO}, and the {@link User} entity.
 * </p>
 *
 * <p>The implementation of this mapper is automatically generated by MapStruct
 * based on the method signatures, and it is configured to work within the
 * Spring component model.
 * </p>
 *
 * <p>Note: Fields such as "id" and "createDate" are ignored when mapping from
 * {@link UserApplicationDTO} to {@link User} entity.</p>
 *
 */
@Mapper(componentModel = "spring")
public interface RegisterUserMapper {

    /**
     * Maps a {@link RegistrationUserRequest} to a {@link UserApplicationDTO}.
     *
     * @param request The registration request containing user data.
     * @return The corresponding {@link UserApplicationDTO}.
     */
    UserApplicationDTO toApplicationDTO(RegistrationUserRequest request);

    /**
     * Maps a {@link UserApplicationDTO} to a {@link User} entity.
     *
     * <p>Note: The fields "id" and "createDate" are ignored during the mapping process.</p>
     *
     * @param userApplicationDTO The DTO containing application-level user data.
     * @return The corresponding {@link User} entity, ready to be saved in the database.
     */
    @Mapping(target = "id", ignore = true)
    @Mapping(target = "createDate", ignore = true)
    User toEntity(UserApplicationDTO userApplicationDTO);

    /**
     * Maps a {@link User} entity to a {@link RegisteredUserWebDTO}.
     *
     * @param user The user entity from the database.
     * @return The corresponding {@link RegisteredUserWebDTO} for web-based data transfer.
     */
    RegisteredUserWebDTO toWebDTO(User user);
}
